#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Remote server details
REMOTE_SERVER=""
REMOTE_PATH="/usr/local/bin"

# Local build details
BUILD_DIR="bin"
BINARY_NAME="grendel"

# Default to build mode if no argument specified
MODE="build"
if [ $# -lt 1 ] || [ $# -gt 2 ]; then
   echo -e "${RED}Usage: $0 <mode> [remote_server]${NC}"
   exit 1
fi

MODE=$1
if [ $# -eq 2 ]; then
   REMOTE_SERVER=$2
fi

if [ "$MODE" != "build" ] && [ "$MODE" != "release" ]; then
   echo -e "${RED}Invalid mode. Use 'build' or 'release'${NC}"
   exit 1
fi

if [ -z "$REMOTE_SERVER" ]; then
   echo -e "${RED}Remote server must be specified${NC}"
   exit 1
fi

echo -e "${BLUE}🔧 Running in ${MODE} mode${NC}"

# Add timestamp function
format_timestamp() {
    date "+%B %d, %Y at %I:%M%p %Z"
}

# Clear screen and add blank lines
clear
echo
echo

echo -e "${BLUE}🚀 Starting Build $(format_timestamp)...${NC}"

# Create bin directory if it doesn't exist
if [ ! -d "$BUILD_DIR" ]; then
    echo -e "${YELLOW}📁 Creating build directory...${NC}"
    if ! mkdir -p "$BUILD_DIR"; then
        echo -e "${RED}❌ Failed to create build directory${NC}"
        exit 1
    fi
fi

# Clean any existing binary
if [ -f "$BUILD_DIR/$BINARY_NAME" ]; then
    echo -e "${YELLOW}🧹 Cleaning old binary...${NC}"
    if ! rm "$BUILD_DIR/$BINARY_NAME"; then
        echo -e "${RED}❌ Failed to remove old binary${NC}"
        exit 1
    fi
fi

# Run go mod tidy first
echo -e "${BLUE}📦 Running go mod tidy...${NC}"
if ! go mod tidy; then
    echo -e "${RED}❌ go mod tidy failed${NC}"
    exit 1
fi

# Create tag name before using it
TAG_FILE=".last_tag"
if [ "$MODE" == "release" ]; then
    if [ ! -f "$TAG_FILE" ]; then
        echo -e "${RED}❌ Cannot perform release: $TAG_FILE does not exist${NC}"
        echo -e "${RED}You are not able to build and release${NC}"
        exit 1
    fi

    if ! LAST_TAG=$(cat "$TAG_FILE"); then
        echo -e "${RED}❌ Failed to read tag file${NC}"
        exit 1
    fi
    TAG_NAME=$((LAST_TAG + 1))

    # Save the new tag number only in release mode
    if ! echo "$TAG_NAME" > "$TAG_FILE"; then
        echo -e "${RED}❌ Failed to write to tag file${NC}"
        exit 1
    fi

    # Update banner date in logger.go before building
    echo -e "${BLUE}📅 Updating banner date...${NC}"
    TODAY=$(date "+%b %-d, %Y")
    sed -i "s/Updated [A-Z][a-z]\{2\} [0-9]\{1,2\}, [0-9]\{4\}/Updated ${TODAY}/" logger/logger.go

    echo -e "${BLUE}🔢 Updating build number...${NC}"
    BUILD=$(cat .last_tag)
    sed -i "s/Build [0-9]\{1,3\}/Build ${BUILD}/" logger/logger.go
else
    # In build mode, just read the current tag without incrementing
    if [ -f "$TAG_FILE" ]; then
        if ! TAG_NAME=$(cat "$TAG_FILE"); then
            echo -e "${RED}❌ Failed to read tag file${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}⚠️  No tag file found - using version from logger.go${NC}"
        # Don't set TAG_NAME as we'll use whatever is in the files already
    fi
fi

# Copy files to remote
echo -e "${YELLOW}📤 Copying CUDA files to remote...${NC}"
if ! rsync -av --exclude='libkeygen.so' gpu/keygen/ "${REMOTE_SERVER}:~/keygen/" >/dev/null 2>&1; then
    echo -e "${RED}❌ Failed to copy CUDA files to remote${NC}"
    exit 1
fi

# CUDA environment variables
export PATH=/opt/cuda/bin:$PATH
export LD_LIBRARY_PATH=/opt/cuda/lib64:$LD_LIBRARY_PATH
export CUDA_HOME=/opt/cuda
export C_INCLUDE_PATH=$CUDA_HOME/include:$C_INCLUDE_PATH
export CPLUS_INCLUDE_PATH=$CUDA_HOME/include:$CPLUS_INCLUDE_PATH
export CGO_CFLAGS="-I/opt/cuda/include"
export CGO_LDFLAGS="-L/opt/cuda/lib64 -lcudart"

# Define check_cuda function
check_cuda() {
    if [ -d "/opt/cuda" ] && [ -f "/opt/cuda/lib64/libcudart.so" ]; then
        return 0  # CUDA is installed
    else
        return 1  # CUDA is not installed
    fi
}

# Build on remote
echo -e "${BLUE}🔨 Building CUDA library on remote...${NC}"
if ! ssh "${REMOTE_SERVER}" "cd ~/keygen && make clean && make" >/dev/null 2>&1; then
    echo -e "${RED}❌ Remote CUDA build failed${NC}"
    # Show the actual error output
    ssh "${REMOTE_SERVER}" "cd ~/keygen && make clean && make"
    exit 1
fi

# Copy to system lib directory on remote and run ldconfig
echo -e "${YELLOW}📦 Installing CUDA library on remote...${NC}"
if ! ssh "${REMOTE_SERVER}" "sudo cp ~/keygen/libkeygen.so /usr/local/lib/ && sudo ldconfig" >/dev/null 2>&1; then
    echo -e "${RED}❌ Failed to install CUDA library on remote${NC}"
    exit 1
fi

# Copy back to local
echo -e "${BLUE}📥 Copying CUDA library back to local...${NC}"
if ! scp "${REMOTE_SERVER}:~/keygen/libkeygen.so" /usr/local/lib >/dev/null 2>&1; then
    echo -e "${RED}❌ Failed to copy CUDA library back to local${NC}"
    exit 1
fi

echo -e "${GREEN}✅ CUDA library build complete${NC}"

echo

echo -e "${BLUE}🔨 Building binary...${NC}"
if check_cuda; then
    # Build with CUDA support
    if ! CGO_ENABLED=1 NVCCFLAGS="-shared -Xcompiler -fPIC --std=c++11 -O3 -arch=sm_89 --use_fast_math -maxrregcount 64 -Xptxas -O3,-v" \
        go build -tags "opencl,cuda" -ldflags "-r /opt/cuda/lib64" -o "$BUILD_DIR/$BINARY_NAME" .; then
        echo -e "${RED}❌ Build failed${NC}"
        exit 1
    fi
    echo -e "${GREEN}✅ Built binary with CUDA support${NC}"
else
    # Build without CUDA support
    if ! CGO_ENABLED=0 \
        go build -tags "opencl" -ldflags "-s -w" -o "$BUILD_DIR/$BINARY_NAME" .; then
        echo -e "${RED}❌ Build failed${NC}"
        exit 1
    fi
    echo -e "${GREEN}✅ Built binary without CUDA support${NC}"
fi


# Get binary size
BINARY_SIZE=$(find "$BUILD_DIR" -name "$BINARY_NAME" -printf "%s" | numfmt --to=iec-i --suffix=B)
echo -e "${GREEN}✅ Build successful! Binary size: ${BINARY_SIZE}${NC}"

if [ "$MODE" == "release" ]; then
    # Prompt for change description
    echo -e "${RED}📝 Enter a description of the changes (press Enter when done):${NC}"
    echo -n "(msg) ~ "
    read -r CHANGE_DESCRIPTION

    # Commit and push changes
    echo -e "${BLUE}📝 Committing changes...${NC}"
    if ! git commit -am "Build ${TAG_NAME}: ${CHANGE_DESCRIPTION}" >/dev/null 2>&1; then
        echo -e "${RED}❌ Failed to commit changes${NC}"
        git status
        exit 1
    fi

    echo -e "${BLUE}🚀 Pushing changes...${NC}"
    if ! git push origin HEAD >/dev/null 2>&1; then
        echo -e "${RED}❌ Failed to push changes${NC}"
        git status
        exit 1
    fi

    # Create and push Git tag
    echo -e "${BLUE}🏷️  Creating Git tag: ${TAG_NAME}...${NC}"
    if ! git tag "${TAG_NAME}" >/dev/null 2>&1; then
        echo -e "${RED}❌ Failed to create tag${NC}"
        git tag -l
        exit 1
    fi

    if ! git push origin "${TAG_NAME}" >/dev/null 2>&1; then
        echo -e "${RED}❌ Failed to push tag${NC}"
        git tag -d "${TAG_NAME}"
        exit 1
    fi

    echo -e "${GREEN}✅ Tag created and pushed!${NC}"
fi

# Deploy to remote server
echo -e "${BLUE}📤 Deploying to ${REMOTE_SERVER}...${NC}"
if ! scp "$BUILD_DIR/$BINARY_NAME" "${REMOTE_SERVER}:${REMOTE_PATH}" >/dev/null 2>&1; then
    echo -e "${RED}❌ Deployment failed${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Deployment successful!${NC}"

# Cleanup local binary
echo -e "${YELLOW}🧹 Cleaning up local binary...${NC}"
if ! rm "$BUILD_DIR/$BINARY_NAME"; then
    echo -e "${RED}⚠️  Failed to remove local binary${NC}"
else
    echo -e "${GREEN}✅ Local binary cleaned up${NC}"
fi

echo -e "${GREEN}🎉 Build and deploy completed!${NC}"

# Print final status
echo -e "\n${BLUE}📋 Summary:${NC}"
echo -e "  🕒 $(format_timestamp)"
echo -e "  📍 $BUILD_DIR/$BINARY_NAME"
echo -e "  📦 $BINARY_SIZE"
echo -e "  🎯 ${REMOTE_SERVER}:${REMOTE_PATH}/${BINARY_NAME}"
if [ "$MODE" == "release" ] || [ -n "${TAG_NAME:-}" ]; then
    echo -e "  🏷️  Tag: ${TAG_NAME}"
fi
echo -e "  ⌛ $(format_timestamp)"

# fin
